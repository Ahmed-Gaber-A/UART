
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000005ae  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a94  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027c  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000409  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000304  00000000  00000000  0000235b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 01 	call	0x370	; 0x370 <main>
  8a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:

#include "DIO.h"

void DIO_WritePin (uint8 PinNum , uint8 PinValue)
{
	if((PinNum>=0)&&(PinNum<=7))
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	e8 f4       	brcc	.+58     	; 0xd0 <DIO_WritePin+0x3e>
	{
		if(PinValue==0)
  96:	66 23       	and	r22, r22
  98:	71 f4       	brne	.+28     	; 0xb6 <DIO_WritePin+0x24>
		{
			clrbit(PORTA,PinNum);
  9a:	4b b3       	in	r20, 0x1b	; 27
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_WritePin+0x16>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_WritePin+0x12>
  ac:	cb 01       	movw	r24, r22
  ae:	80 95       	com	r24
  b0:	84 23       	and	r24, r20
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	08 95       	ret
		}
		else
		{
			setbit(PORTA,PinNum);
  b6:	4b b3       	in	r20, 0x1b	; 27
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	b9 01       	movw	r22, r18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_WritePin+0x32>
  c0:	66 0f       	add	r22, r22
  c2:	77 1f       	adc	r23, r23
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_WritePin+0x2e>
  c8:	cb 01       	movw	r24, r22
  ca:	84 2b       	or	r24, r20
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	08 95       	ret
		}
	}
	else if((PinNum>=8)&&(PinNum<=15))
  d0:	98 2f       	mov	r25, r24
  d2:	98 50       	subi	r25, 0x08	; 8
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	18 f5       	brcc	.+70     	; 0x11e <DIO_WritePin+0x8c>
	{
		if(PinValue==0)
  d8:	66 23       	and	r22, r22
  da:	89 f4       	brne	.+34     	; 0xfe <DIO_WritePin+0x6c>
		{
			clrbit(PORTB,(PinNum-8));
  dc:	68 b3       	in	r22, 0x18	; 24
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	28 50       	subi	r18, 0x08	; 8
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	ca 01       	movw	r24, r20
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_WritePin+0x60>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_WritePin+0x5c>
  f6:	80 95       	com	r24
  f8:	86 23       	and	r24, r22
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	08 95       	ret
		}
		else
		{
			setbit(PORTB,(PinNum-8));
  fe:	68 b3       	in	r22, 0x18	; 24
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	28 50       	subi	r18, 0x08	; 8
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	ca 01       	movw	r24, r20
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_WritePin+0x82>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	2a 95       	dec	r18
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_WritePin+0x7e>
 118:	86 2b       	or	r24, r22
 11a:	88 bb       	out	0x18, r24	; 24
 11c:	08 95       	ret
		}
	}
	else if((PinNum>=16)&&(PinNum<=23))
 11e:	98 2f       	mov	r25, r24
 120:	90 51       	subi	r25, 0x10	; 16
 122:	98 30       	cpi	r25, 0x08	; 8
 124:	18 f5       	brcc	.+70     	; 0x16c <DIO_WritePin+0xda>
	{
		if(PinValue==0)
 126:	66 23       	and	r22, r22
 128:	89 f4       	brne	.+34     	; 0x14c <DIO_WritePin+0xba>
		{
			clrbit(PORTC,(PinNum-16));
 12a:	65 b3       	in	r22, 0x15	; 21
 12c:	28 2f       	mov	r18, r24
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	20 51       	subi	r18, 0x10	; 16
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	ca 01       	movw	r24, r20
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_WritePin+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	2a 95       	dec	r18
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_WritePin+0xaa>
 144:	80 95       	com	r24
 146:	86 23       	and	r24, r22
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
		}
		else
		{
			setbit(PORTC,(PinNum-16));
 14c:	65 b3       	in	r22, 0x15	; 21
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	20 51       	subi	r18, 0x10	; 16
 154:	30 40       	sbci	r19, 0x00	; 0
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	ca 01       	movw	r24, r20
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_WritePin+0xd0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	2a 95       	dec	r18
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_WritePin+0xcc>
 166:	86 2b       	or	r24, r22
 168:	85 bb       	out	0x15, r24	; 21
 16a:	08 95       	ret
		}
	}
	else if((PinNum>=24)&&((PinNum<=31)))
 16c:	98 2f       	mov	r25, r24
 16e:	98 51       	subi	r25, 0x18	; 24
 170:	98 30       	cpi	r25, 0x08	; 8
 172:	10 f5       	brcc	.+68     	; 0x1b8 <DIO_WritePin+0x126>
	{
		if(PinValue==0)
 174:	66 23       	and	r22, r22
 176:	89 f4       	brne	.+34     	; 0x19a <DIO_WritePin+0x108>
		{
			clrbit(PORTD,(PinNum-24));
 178:	62 b3       	in	r22, 0x12	; 18
 17a:	28 2f       	mov	r18, r24
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	28 51       	subi	r18, 0x18	; 24
 180:	30 40       	sbci	r19, 0x00	; 0
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	ca 01       	movw	r24, r20
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_WritePin+0xfc>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	2a 95       	dec	r18
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_WritePin+0xf8>
 192:	80 95       	com	r24
 194:	86 23       	and	r24, r22
 196:	82 bb       	out	0x12, r24	; 18
 198:	08 95       	ret
		}
		else
		{
			setbit(PORTD,(PinNum-24));
 19a:	62 b3       	in	r22, 0x12	; 18
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	28 51       	subi	r18, 0x18	; 24
 1a2:	30 40       	sbci	r19, 0x00	; 0
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	ca 01       	movw	r24, r20
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_WritePin+0x11e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	2a 95       	dec	r18
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_WritePin+0x11a>
 1b4:	86 2b       	or	r24, r22
 1b6:	82 bb       	out	0x12, r24	; 18
 1b8:	08 95       	ret

000001ba <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
	uint8 PinValue;


	if((PinNum >= 0) && (PinNum <= 7))
 1ba:	88 30       	cpi	r24, 0x08	; 8
 1bc:	58 f4       	brcc	.+22     	; 0x1d4 <DIO_ReadPin+0x1a>
	{
		PinValue = getbit(PINA,PinNum);
 1be:	29 b3       	in	r18, 0x19	; 25
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	a9 01       	movw	r20, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_ReadPin+0x10>
 1c6:	55 95       	asr	r21
 1c8:	47 95       	ror	r20
 1ca:	8a 95       	dec	r24
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_ReadPin+0xc>
 1ce:	94 2f       	mov	r25, r20
 1d0:	91 70       	andi	r25, 0x01	; 1
 1d2:	38 c0       	rjmp	.+112    	; 0x244 <DIO_ReadPin+0x8a>
	}
	else if((PinNum >= 8) && (PinNum <= 15))
 1d4:	28 2f       	mov	r18, r24
 1d6:	28 50       	subi	r18, 0x08	; 8
 1d8:	28 30       	cpi	r18, 0x08	; 8
 1da:	78 f4       	brcc	.+30     	; 0x1fa <DIO_ReadPin+0x40>
	{
		PinValue = getbit(PINB,(PinNum-8));
 1dc:	46 b3       	in	r20, 0x16	; 22
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	28 50       	subi	r18, 0x08	; 8
 1e6:	30 40       	sbci	r19, 0x00	; 0
 1e8:	ca 01       	movw	r24, r20
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_ReadPin+0x36>
 1ec:	95 95       	asr	r25
 1ee:	87 95       	ror	r24
 1f0:	2a 95       	dec	r18
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_ReadPin+0x32>
 1f4:	98 2f       	mov	r25, r24
 1f6:	91 70       	andi	r25, 0x01	; 1
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <DIO_ReadPin+0x8a>
	}
	else if((PinNum >= 16) && (PinNum <= 23))
 1fa:	28 2f       	mov	r18, r24
 1fc:	20 51       	subi	r18, 0x10	; 16
 1fe:	28 30       	cpi	r18, 0x08	; 8
 200:	78 f4       	brcc	.+30     	; 0x220 <DIO_ReadPin+0x66>
	{
		PinValue = getbit(PINC,(PinNum-16));
 202:	43 b3       	in	r20, 0x13	; 19
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	20 51       	subi	r18, 0x10	; 16
 20c:	30 40       	sbci	r19, 0x00	; 0
 20e:	ca 01       	movw	r24, r20
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_ReadPin+0x5c>
 212:	95 95       	asr	r25
 214:	87 95       	ror	r24
 216:	2a 95       	dec	r18
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_ReadPin+0x58>
 21a:	98 2f       	mov	r25, r24
 21c:	91 70       	andi	r25, 0x01	; 1
 21e:	12 c0       	rjmp	.+36     	; 0x244 <DIO_ReadPin+0x8a>
	}
	else if((PinNum >= 24) && (PinNum <= 31))
 220:	28 2f       	mov	r18, r24
 222:	28 51       	subi	r18, 0x18	; 24
 224:	28 30       	cpi	r18, 0x08	; 8
 226:	70 f4       	brcc	.+28     	; 0x244 <DIO_ReadPin+0x8a>
	{
		PinValue = getbit(PIND,(PinNum-24));
 228:	40 b3       	in	r20, 0x10	; 16
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	28 51       	subi	r18, 0x18	; 24
 232:	30 40       	sbci	r19, 0x00	; 0
 234:	ca 01       	movw	r24, r20
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_ReadPin+0x82>
 238:	95 95       	asr	r25
 23a:	87 95       	ror	r24
 23c:	2a 95       	dec	r18
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_ReadPin+0x7e>
 240:	98 2f       	mov	r25, r24
 242:	91 70       	andi	r25, 0x01	; 1
	}

	return PinValue;
}
 244:	89 2f       	mov	r24, r25
 246:	08 95       	ret

00000248 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if((PinNum>=0)&&(PinNum<=7))
 248:	88 30       	cpi	r24, 0x08	; 8
 24a:	e8 f4       	brcc	.+58     	; 0x286 <DIO_SetPinDirection+0x3e>
	{
		if(PinDirection==0)
 24c:	66 23       	and	r22, r22
 24e:	71 f4       	brne	.+28     	; 0x26c <DIO_SetPinDirection+0x24>
		{
			clrbit(DDRA,PinNum);
 250:	4a b3       	in	r20, 0x1a	; 26
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinDirection+0x16>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinDirection+0x12>
 262:	cb 01       	movw	r24, r22
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8a bb       	out	0x1a, r24	; 26
 26a:	08 95       	ret
		}
		else
		{
			setbit(DDRA,PinNum);
 26c:	4a b3       	in	r20, 0x1a	; 26
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	b9 01       	movw	r22, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_SetPinDirection+0x32>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	8a 95       	dec	r24
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_SetPinDirection+0x2e>
 27e:	cb 01       	movw	r24, r22
 280:	84 2b       	or	r24, r20
 282:	8a bb       	out	0x1a, r24	; 26
 284:	08 95       	ret
		}
	}
	else if((PinNum>=8)&&(PinNum<=15))
 286:	98 2f       	mov	r25, r24
 288:	98 50       	subi	r25, 0x08	; 8
 28a:	98 30       	cpi	r25, 0x08	; 8
 28c:	18 f5       	brcc	.+70     	; 0x2d4 <DIO_SetPinDirection+0x8c>
	{
		if(PinDirection==0)
 28e:	66 23       	and	r22, r22
 290:	89 f4       	brne	.+34     	; 0x2b4 <DIO_SetPinDirection+0x6c>
		{
			clrbit(DDRB,(PinNum-8));
 292:	67 b3       	in	r22, 0x17	; 23
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	28 50       	subi	r18, 0x08	; 8
 29a:	30 40       	sbci	r19, 0x00	; 0
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	ca 01       	movw	r24, r20
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SetPinDirection+0x60>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	2a 95       	dec	r18
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SetPinDirection+0x5c>
 2ac:	80 95       	com	r24
 2ae:	86 23       	and	r24, r22
 2b0:	87 bb       	out	0x17, r24	; 23
 2b2:	08 95       	ret
		}
		else
		{
			setbit(DDRB,(PinNum-8));
 2b4:	67 b3       	in	r22, 0x17	; 23
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	28 50       	subi	r18, 0x08	; 8
 2bc:	30 40       	sbci	r19, 0x00	; 0
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	ca 01       	movw	r24, r20
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_SetPinDirection+0x82>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	2a 95       	dec	r18
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_SetPinDirection+0x7e>
 2ce:	86 2b       	or	r24, r22
 2d0:	87 bb       	out	0x17, r24	; 23
 2d2:	08 95       	ret
		}
	}
	else if((PinNum>=16)&&(PinNum<=23))
 2d4:	98 2f       	mov	r25, r24
 2d6:	90 51       	subi	r25, 0x10	; 16
 2d8:	98 30       	cpi	r25, 0x08	; 8
 2da:	18 f5       	brcc	.+70     	; 0x322 <DIO_SetPinDirection+0xda>
	{
		if(PinDirection==0)
 2dc:	66 23       	and	r22, r22
 2de:	89 f4       	brne	.+34     	; 0x302 <DIO_SetPinDirection+0xba>
		{
			clrbit(DDRC,(PinNum-16));
 2e0:	64 b3       	in	r22, 0x14	; 20
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	20 51       	subi	r18, 0x10	; 16
 2e8:	30 40       	sbci	r19, 0x00	; 0
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	ca 01       	movw	r24, r20
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_SetPinDirection+0xae>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	2a 95       	dec	r18
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_SetPinDirection+0xaa>
 2fa:	80 95       	com	r24
 2fc:	86 23       	and	r24, r22
 2fe:	84 bb       	out	0x14, r24	; 20
 300:	08 95       	ret
		}
		else
		{
			setbit(DDRC,(PinNum-16));
 302:	64 b3       	in	r22, 0x14	; 20
 304:	28 2f       	mov	r18, r24
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	20 51       	subi	r18, 0x10	; 16
 30a:	30 40       	sbci	r19, 0x00	; 0
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	ca 01       	movw	r24, r20
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_SetPinDirection+0xd0>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	2a 95       	dec	r18
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_SetPinDirection+0xcc>
 31c:	86 2b       	or	r24, r22
 31e:	84 bb       	out	0x14, r24	; 20
 320:	08 95       	ret
		}
	}
	else if((PinNum>=24)&&((PinNum<=31)))
 322:	98 2f       	mov	r25, r24
 324:	98 51       	subi	r25, 0x18	; 24
 326:	98 30       	cpi	r25, 0x08	; 8
 328:	10 f5       	brcc	.+68     	; 0x36e <DIO_SetPinDirection+0x126>
	{
		if(PinDirection==0)
 32a:	66 23       	and	r22, r22
 32c:	89 f4       	brne	.+34     	; 0x350 <DIO_SetPinDirection+0x108>
		{
			clrbit(DDRD,(PinNum-24));
 32e:	61 b3       	in	r22, 0x11	; 17
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	28 51       	subi	r18, 0x18	; 24
 336:	30 40       	sbci	r19, 0x00	; 0
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	ca 01       	movw	r24, r20
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_SetPinDirection+0xfc>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	2a 95       	dec	r18
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_SetPinDirection+0xf8>
 348:	80 95       	com	r24
 34a:	86 23       	and	r24, r22
 34c:	81 bb       	out	0x11, r24	; 17
 34e:	08 95       	ret
		}
		else
		{
			setbit(DDRD,(PinNum-24));
 350:	61 b3       	in	r22, 0x11	; 17
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	28 51       	subi	r18, 0x18	; 24
 358:	30 40       	sbci	r19, 0x00	; 0
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	ca 01       	movw	r24, r20
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_SetPinDirection+0x11e>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	2a 95       	dec	r18
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_SetPinDirection+0x11a>
 36a:	86 2b       	or	r24, r22
 36c:	81 bb       	out	0x11, r24	; 17
 36e:	08 95       	ret

00000370 <main>:

#include "UART.h"
#include "UART_CFG.h"

int main(void)
{
 370:	ff cf       	rjmp	.-2      	; 0x370 <main>

00000372 <UART_INIT>:
{
	status_t checker = UART_OK; /* checker UART init returns NOT_OK if any configuration wasn't correct*/
	uint16 UBRR = 0u; /* variable to hold BaudRate */
	
	/*******  check DoubleSpeed configuration  **********/
	if (UART_Cfg.DoubleSpeed == DS_Enabled)
 372:	80 91 62 00 	lds	r24, 0x0062
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	f9 f4       	brne	.+62     	; 0x3b8 <UART_INIT+0x46>
	{
	    setbit(UCSRA,U2X);
 37a:	59 9a       	sbi	0x0b, 1	; 11
		UBRR = (((F_CPU / (UART_Cfg.BaudRate * 8UL))) - 1);
 37c:	80 91 60 00 	lds	r24, 0x0060
 380:	90 91 61 00 	lds	r25, 0x0061
 384:	a0 e0       	ldi	r26, 0x00	; 0
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	aa 1f       	adc	r26, r26
 38e:	bb 1f       	adc	r27, r27
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	aa 1f       	adc	r26, r26
 396:	bb 1f       	adc	r27, r27
 398:	9c 01       	movw	r18, r24
 39a:	ad 01       	movw	r20, r26
 39c:	22 0f       	add	r18, r18
 39e:	33 1f       	adc	r19, r19
 3a0:	44 1f       	adc	r20, r20
 3a2:	55 1f       	adc	r21, r21
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	72 e1       	ldi	r23, 0x12	; 18
 3a8:	8a e7       	ldi	r24, 0x7A	; 122
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 b3 02 	call	0x566	; 0x566 <__udivmodsi4>
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	30 40       	sbci	r19, 0x00	; 0
 *
 * Return:			Status to check function executions if it is done properly or not
 *******************************************************************************/
status_t UART_INIT( void/*UART_Cfg_S* UART_Cfg*/)
{
	status_t checker = UART_OK; /* checker UART init returns NOT_OK if any configuration wasn't correct*/
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	28 c0       	rjmp	.+80     	; 0x408 <UART_INIT+0x96>
	if (UART_Cfg.DoubleSpeed == DS_Enabled)
	{
	    setbit(UCSRA,U2X);
		UBRR = (((F_CPU / (UART_Cfg.BaudRate * 8UL))) - 1);
	}
	else if (UART_Cfg.DoubleSpeed == DS_Disabled)
 3b8:	88 23       	and	r24, r24
 3ba:	19 f5       	brne	.+70     	; 0x402 <UART_INIT+0x90>
	{
	    clrbit(UCSRA,U2X);
 3bc:	59 98       	cbi	0x0b, 1	; 11
		UBRR = (((F_CPU / (UART_Cfg.BaudRate * 16UL))) - 1);
 3be:	80 91 60 00 	lds	r24, 0x0060
 3c2:	90 91 61 00 	lds	r25, 0x0061
 3c6:	a0 e0       	ldi	r26, 0x00	; 0
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	aa 1f       	adc	r26, r26
 3d0:	bb 1f       	adc	r27, r27
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	aa 1f       	adc	r26, r26
 3d8:	bb 1f       	adc	r27, r27
 3da:	9c 01       	movw	r18, r24
 3dc:	ad 01       	movw	r20, r26
 3de:	22 0f       	add	r18, r18
 3e0:	33 1f       	adc	r19, r19
 3e2:	44 1f       	adc	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	44 1f       	adc	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	72 e1       	ldi	r23, 0x12	; 18
 3f2:	8a e7       	ldi	r24, 0x7A	; 122
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 b3 02 	call	0x566	; 0x566 <__udivmodsi4>
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	30 40       	sbci	r19, 0x00	; 0
 *
 * Return:			Status to check function executions if it is done properly or not
 *******************************************************************************/
status_t UART_INIT( void/*UART_Cfg_S* UART_Cfg*/)
{
	status_t checker = UART_OK; /* checker UART init returns NOT_OK if any configuration wasn't correct*/
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	03 c0       	rjmp	.+6      	; 0x408 <UART_INIT+0x96>
	uint16 UBRR = 0u; /* variable to hold BaudRate */
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
	    clrbit(UCSRA,U2X);
		UBRR = (((F_CPU / (UART_Cfg.BaudRate * 16UL))) - 1);
	}
	else 
	{
		checker = UART_NOK;
 406:	81 e0       	ldi	r24, 0x01	; 1
	}
	/* Set BaudRate */
	clrbit(UCSRC,URSEL); /* access UBRRH */
 408:	90 b5       	in	r25, 0x20	; 32
 40a:	9f 77       	andi	r25, 0x7F	; 127
 40c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8)UBRR;
 40e:	29 b9       	out	0x09, r18	; 9
	UBRRH = (uint8)(UBRR >> 8);
 410:	30 bd       	out	0x20, r19	; 32
	setbit(UCSRC,URSEL); /* access UCSRC */
 412:	90 b5       	in	r25, 0x20	; 32
 414:	90 68       	ori	r25, 0x80	; 128
 416:	90 bd       	out	0x20, r25	; 32
	/************* check RX Interrupt configuration ****************/
	if (UART_Cfg.RxINT == RxINT_EN)
 418:	90 91 63 00 	lds	r25, 0x0063
 41c:	91 30       	cpi	r25, 0x01	; 1
 41e:	11 f4       	brne	.+4      	; 0x424 <UART_INIT+0xb2>
	{
		setbit(UCSRB,RXCIE);
 420:	57 9a       	sbi	0x0a, 7	; 10
 422:	05 c0       	rjmp	.+10     	; 0x42e <UART_INIT+0xbc>
	}
	else if (UART_Cfg.RxINT == RxINT_Dis)
 424:	99 23       	and	r25, r25
 426:	11 f4       	brne	.+4      	; 0x42c <UART_INIT+0xba>
	{
		clrbit(UCSRB,RXCIE);
 428:	57 98       	cbi	0x0a, 7	; 10
 42a:	01 c0       	rjmp	.+2      	; 0x42e <UART_INIT+0xbc>
	}
	else 
	{
		checker = UART_NOK;
 42c:	81 e0       	ldi	r24, 0x01	; 1
	}
	/**************** check TX Interrupt configuration *************/
	if (UART_Cfg.TxINT == TxINT_EN)
 42e:	90 91 64 00 	lds	r25, 0x0064
 432:	91 30       	cpi	r25, 0x01	; 1
 434:	11 f4       	brne	.+4      	; 0x43a <UART_INIT+0xc8>
	{
		setbit(UCSRB,TXCIE);
 436:	56 9a       	sbi	0x0a, 6	; 10
 438:	05 c0       	rjmp	.+10     	; 0x444 <UART_INIT+0xd2>
	}
	else if (UART_Cfg.TxINT == TxINT_Dis)
 43a:	99 23       	and	r25, r25
 43c:	11 f4       	brne	.+4      	; 0x442 <UART_INIT+0xd0>
	{
		clrbit(UCSRB,TXCIE);
 43e:	56 98       	cbi	0x0a, 6	; 10
 440:	01 c0       	rjmp	.+2      	; 0x444 <UART_INIT+0xd2>
	}
	else 
	{
		checker = UART_NOK;
 442:	81 e0       	ldi	r24, 0x01	; 1
	}
	/***************** check Empty Interrupt configuration **********/
	if (UART_Cfg.EmptyINT == EmptyINT_EN)
 444:	90 91 65 00 	lds	r25, 0x0065
 448:	91 30       	cpi	r25, 0x01	; 1
 44a:	11 f4       	brne	.+4      	; 0x450 <UART_INIT+0xde>
	{
		setbit(UCSRB,UDRIE);
 44c:	55 9a       	sbi	0x0a, 5	; 10
 44e:	05 c0       	rjmp	.+10     	; 0x45a <UART_INIT+0xe8>
	}
	else if (UART_Cfg.EmptyINT == EmptyINT_Dis)
 450:	99 23       	and	r25, r25
 452:	11 f4       	brne	.+4      	; 0x458 <UART_INIT+0xe6>
	{
		clrbit(UCSRB,UDRIE);
 454:	55 98       	cbi	0x0a, 5	; 10
 456:	01 c0       	rjmp	.+2      	; 0x45a <UART_INIT+0xe8>
	}
	else 
	{
		checker = UART_NOK;
 458:	81 e0       	ldi	r24, 0x01	; 1
	}
	/***************** check Data size in frame configuration ********/
	if (UART_Cfg.Datasize == Data_5)
 45a:	90 91 66 00 	lds	r25, 0x0066
 45e:	99 23       	and	r25, r25
 460:	31 f4       	brne	.+12     	; 0x46e <UART_INIT+0xfc>
	{
		clrbit(UCSRB,UCSZ2);
 462:	52 98       	cbi	0x0a, 2	; 10
		clrbit(UCSRC,UCSZ1);
 464:	90 b5       	in	r25, 0x20	; 32
 466:	9b 7f       	andi	r25, 0xFB	; 251
 468:	90 bd       	out	0x20, r25	; 32
		clrbit(UCSRB,UCSZ0);
 46a:	51 98       	cbi	0x0a, 1	; 10
 46c:	21 c0       	rjmp	.+66     	; 0x4b0 <UART_INIT+0x13e>
	}
	else if (UART_Cfg.Datasize == Data_6)
 46e:	91 30       	cpi	r25, 0x01	; 1
 470:	31 f4       	brne	.+12     	; 0x47e <UART_INIT+0x10c>
	{
		clrbit(UCSRB,UCSZ2);
 472:	52 98       	cbi	0x0a, 2	; 10
		clrbit(UCSRC,UCSZ1);
 474:	90 b5       	in	r25, 0x20	; 32
 476:	9b 7f       	andi	r25, 0xFB	; 251
 478:	90 bd       	out	0x20, r25	; 32
		setbit(UCSRB,UCSZ0);
 47a:	51 9a       	sbi	0x0a, 1	; 10
 47c:	19 c0       	rjmp	.+50     	; 0x4b0 <UART_INIT+0x13e>
	}
	else if (UART_Cfg.Datasize == Data_7)
 47e:	92 30       	cpi	r25, 0x02	; 2
 480:	31 f4       	brne	.+12     	; 0x48e <UART_INIT+0x11c>
	{
		clrbit(UCSRB,UCSZ2);
 482:	52 98       	cbi	0x0a, 2	; 10
		setbit(UCSRC,UCSZ1);
 484:	90 b5       	in	r25, 0x20	; 32
 486:	94 60       	ori	r25, 0x04	; 4
 488:	90 bd       	out	0x20, r25	; 32
		clrbit(UCSRB,UCSZ0);
 48a:	51 98       	cbi	0x0a, 1	; 10
 48c:	11 c0       	rjmp	.+34     	; 0x4b0 <UART_INIT+0x13e>
	}
	else if (UART_Cfg.Datasize == Data_8)
 48e:	93 30       	cpi	r25, 0x03	; 3
 490:	31 f4       	brne	.+12     	; 0x49e <UART_INIT+0x12c>
	{
		clrbit(UCSRB,UCSZ2);
 492:	52 98       	cbi	0x0a, 2	; 10
		setbit(UCSRC,UCSZ1);
 494:	90 b5       	in	r25, 0x20	; 32
 496:	94 60       	ori	r25, 0x04	; 4
 498:	90 bd       	out	0x20, r25	; 32
		setbit(UCSRB,UCSZ0);
 49a:	51 9a       	sbi	0x0a, 1	; 10
 49c:	09 c0       	rjmp	.+18     	; 0x4b0 <UART_INIT+0x13e>
	}
	else if (UART_Cfg.Datasize == Data_9)
 49e:	94 30       	cpi	r25, 0x04	; 4
 4a0:	31 f4       	brne	.+12     	; 0x4ae <UART_INIT+0x13c>
	{
		setbit(UCSRB,UCSZ2);
 4a2:	52 9a       	sbi	0x0a, 2	; 10
		setbit(UCSRC,UCSZ1);
 4a4:	90 b5       	in	r25, 0x20	; 32
 4a6:	94 60       	ori	r25, 0x04	; 4
 4a8:	90 bd       	out	0x20, r25	; 32
		setbit(UCSRB,UCSZ0);
 4aa:	51 9a       	sbi	0x0a, 1	; 10
 4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <UART_INIT+0x13e>
	}
	else
	{
		checker = UART_NOK;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
	}
	/***************** Check parity bit configuration **********/
	if(UART_Cfg.parity == parity_odd)
 4b0:	90 91 67 00 	lds	r25, 0x0067
 4b4:	91 30       	cpi	r25, 0x01	; 1
 4b6:	39 f4       	brne	.+14     	; 0x4c6 <UART_INIT+0x154>
	{
		setbit(UCSRC,UPM0);
 4b8:	90 b5       	in	r25, 0x20	; 32
 4ba:	90 61       	ori	r25, 0x10	; 16
 4bc:	90 bd       	out	0x20, r25	; 32
		setbit(UCSRC,UPM1);
 4be:	90 b5       	in	r25, 0x20	; 32
 4c0:	90 62       	ori	r25, 0x20	; 32
 4c2:	90 bd       	out	0x20, r25	; 32
 4c4:	13 c0       	rjmp	.+38     	; 0x4ec <UART_INIT+0x17a>
	}
	else if (UART_Cfg.parity == parity_even)
 4c6:	92 30       	cpi	r25, 0x02	; 2
 4c8:	39 f4       	brne	.+14     	; 0x4d8 <UART_INIT+0x166>
	{
		clrbit(UCSRC,UPM0);
 4ca:	90 b5       	in	r25, 0x20	; 32
 4cc:	9f 7e       	andi	r25, 0xEF	; 239
 4ce:	90 bd       	out	0x20, r25	; 32
		setbit(UCSRC,UPM1);
 4d0:	90 b5       	in	r25, 0x20	; 32
 4d2:	90 62       	ori	r25, 0x20	; 32
 4d4:	90 bd       	out	0x20, r25	; 32
 4d6:	0a c0       	rjmp	.+20     	; 0x4ec <UART_INIT+0x17a>
	}
	else if (UART_Cfg.parity == parity_disabled)
 4d8:	99 23       	and	r25, r25
 4da:	39 f4       	brne	.+14     	; 0x4ea <UART_INIT+0x178>
	{
		clrbit(UCSRC,UPM0);
 4dc:	90 b5       	in	r25, 0x20	; 32
 4de:	9f 7e       	andi	r25, 0xEF	; 239
 4e0:	90 bd       	out	0x20, r25	; 32
		clrbit(UCSRC,UPM1);
 4e2:	90 b5       	in	r25, 0x20	; 32
 4e4:	9f 7d       	andi	r25, 0xDF	; 223
 4e6:	90 bd       	out	0x20, r25	; 32
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <UART_INIT+0x17a>
	}
	else 
	{
		checker = UART_NOK;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	/***************** Check stop bits number configuration ******/
	if(UART_Cfg.StopBits == Stop_One)
 4ec:	90 91 68 00 	lds	r25, 0x0068
 4f0:	99 23       	and	r25, r25
 4f2:	21 f4       	brne	.+8      	; 0x4fc <UART_INIT+0x18a>
	{
		clrbit(UCSRC,USBS);
 4f4:	90 b5       	in	r25, 0x20	; 32
 4f6:	97 7f       	andi	r25, 0xF7	; 247
 4f8:	90 bd       	out	0x20, r25	; 32
 4fa:	08 95       	ret
	}
	else if (UART_Cfg.StopBits == Stop_Two)
 4fc:	91 30       	cpi	r25, 0x01	; 1
 4fe:	21 f4       	brne	.+8      	; 0x508 <UART_INIT+0x196>
	{
		setbit(UCSRC,USBS);
 500:	90 b5       	in	r25, 0x20	; 32
 502:	98 60       	ori	r25, 0x08	; 8
 504:	90 bd       	out	0x20, r25	; 32
 506:	08 95       	ret
	}
	else
	{
		checker = UART_NOK;
 508:	81 e0       	ldi	r24, 0x01	; 1
	}
	 
	/* return UART_init function status*/
return checker;
}
 50a:	08 95       	ret

0000050c <UART_SendChar>:
 *******************************************************************************/

status_t UART_SendChar(uint8 a_data)
{
	status_t checker = UART_OK;
	if (getbit(UCSRA,UDRE)==1) /* UDR empty and ready to transmit */
 50c:	9b b1       	in	r25, 0x0b	; 11
 50e:	92 95       	swap	r25
 510:	96 95       	lsr	r25
 512:	97 70       	andi	r25, 0x07	; 7
 514:	90 ff       	sbrs	r25, 0
 516:	03 c0       	rjmp	.+6      	; 0x51e <UART_SendChar+0x12>
	 {
		UDR = a_data;
 518:	8c b9       	out	0x0c, r24	; 12
 * Return:			Status to check if UDR hold the new data or it wasn't empty
 *******************************************************************************/

status_t UART_SendChar(uint8 a_data)
{
	status_t checker = UART_OK;
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	08 95       	ret
	if (getbit(UCSRA,UDRE)==1) /* UDR empty and ready to transmit */
	 {
		UDR = a_data;
	 }
    else if (getbit(UCSRA,UDRE)==0) 
 51e:	9b b1       	in	r25, 0x0b	; 11
 520:	92 95       	swap	r25
 522:	96 95       	lsr	r25
 524:	97 70       	andi	r25, 0x07	; 7
 * Return:			Status to check if UDR hold the new data or it wasn't empty
 *******************************************************************************/

status_t UART_SendChar(uint8 a_data)
{
	status_t checker = UART_OK;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 fd       	sbrc	r25, 0
 52a:	80 e0       	ldi	r24, 0x00	; 0
    else if (getbit(UCSRA,UDRE)==0) 
	{
		checker = UART_NOK;
	}	
return checker;	
}
 52c:	08 95       	ret

0000052e <UART_StartTransmit>:


status_t UART_StartTransmit(void)
{ 
	status_t checker = UART_OK;
	setbit(UCSRB,TXEN); /* Enable UART as TX to start transmitting*/
 52e:	53 9a       	sbi	0x0a, 3	; 10
	while (getbit(UCSRA,TXC)==0); /*wait until transmitting complete*/
 530:	8b b1       	in	r24, 0x0b	; 11
 532:	86 ff       	sbrs	r24, 6
 534:	fd cf       	rjmp	.-6      	; 0x530 <UART_StartTransmit+0x2>
return checker ;
}
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	08 95       	ret

0000053a <UART_StopTransmit>:

status_t UART_StopTransmit(void)
{
	status_t checker = UART_OK;
	clrbit(UCSRB,TXEN); /* Disable UART as TX to stop Transmitting*/
 53a:	53 98       	cbi	0x0a, 3	; 10
	return checker ;
}
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	08 95       	ret

00000540 <UART_ReceiveChar>:

status_t UART_ReceiveChar(uint8* a_data_ptr)
{
	status_t checker = UART_OK;
	if (getbit(UCSRA,RXC)==1)
 540:	5f 9b       	sbis	0x0b, 7	; 11
 542:	05 c0       	rjmp	.+10     	; 0x54e <UART_ReceiveChar+0xe>
	{
		*a_data_ptr = UDR;
 544:	2c b1       	in	r18, 0x0c	; 12
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
	return checker ;
}

status_t UART_ReceiveChar(uint8* a_data_ptr)
{
	status_t checker = UART_OK;
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	08 95       	ret
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	5f 99       	sbic	0x0b, 7	; 11
 552:	80 e0       	ldi	r24, 0x00	; 0
	else if (getbit(UCSRA,RXC)==0)
	{
		checker = UART_NOK;
	}
	return checker;
}
 554:	08 95       	ret

00000556 <UART_StartReceive>:

status_t UART_StartReceive(void)
{
	status_t checker = UART_OK;
	setbit(UCSRB,RXEN); /* Enable UART as TX to start transmitting*/
 556:	54 9a       	sbi	0x0a, 4	; 10
	while (getbit(UCSRA,RXC)==0); /*wait until Reception complete*/
 558:	5f 9b       	sbis	0x0b, 7	; 11
 55a:	fe cf       	rjmp	.-4      	; 0x558 <UART_StartReceive+0x2>
	return checker ;
}
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	08 95       	ret

00000560 <UART_StopReceive>:

status_t UART_StopReceive(void)
{
	status_t checker = UART_OK;
	clrbit(UCSRB,RXEN); /* Disable UART as RX to stop Reception */
 560:	54 98       	cbi	0x0a, 4	; 10
	return checker ;
}
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret

00000566 <__udivmodsi4>:
 566:	a1 e2       	ldi	r26, 0x21	; 33
 568:	1a 2e       	mov	r1, r26
 56a:	aa 1b       	sub	r26, r26
 56c:	bb 1b       	sub	r27, r27
 56e:	fd 01       	movw	r30, r26
 570:	0d c0       	rjmp	.+26     	; 0x58c <__udivmodsi4_ep>

00000572 <__udivmodsi4_loop>:
 572:	aa 1f       	adc	r26, r26
 574:	bb 1f       	adc	r27, r27
 576:	ee 1f       	adc	r30, r30
 578:	ff 1f       	adc	r31, r31
 57a:	a2 17       	cp	r26, r18
 57c:	b3 07       	cpc	r27, r19
 57e:	e4 07       	cpc	r30, r20
 580:	f5 07       	cpc	r31, r21
 582:	20 f0       	brcs	.+8      	; 0x58c <__udivmodsi4_ep>
 584:	a2 1b       	sub	r26, r18
 586:	b3 0b       	sbc	r27, r19
 588:	e4 0b       	sbc	r30, r20
 58a:	f5 0b       	sbc	r31, r21

0000058c <__udivmodsi4_ep>:
 58c:	66 1f       	adc	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	1a 94       	dec	r1
 596:	69 f7       	brne	.-38     	; 0x572 <__udivmodsi4_loop>
 598:	60 95       	com	r22
 59a:	70 95       	com	r23
 59c:	80 95       	com	r24
 59e:	90 95       	com	r25
 5a0:	9b 01       	movw	r18, r22
 5a2:	ac 01       	movw	r20, r24
 5a4:	bd 01       	movw	r22, r26
 5a6:	cf 01       	movw	r24, r30
 5a8:	08 95       	ret

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
